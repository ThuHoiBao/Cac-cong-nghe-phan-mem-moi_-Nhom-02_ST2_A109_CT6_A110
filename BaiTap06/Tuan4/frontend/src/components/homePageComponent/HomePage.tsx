import React, { useEffect, useState } from 'react';
import { getAllCategories, searchProducts } from '../../services/productApi';
import ProductCard from '../productComponent/ProductCard';
import CategoryCard from '../categoryComponent/CategoryCard';
import './HomePage.css';
import image from "../../images/social.png"
import { getProtected } from '../../services/auth/authApi';
import { UserResponseDTO } from '../../dto/responseDTO/UserResponseDTO';
const HomePage: React.FC = () => {
  const [categories, setCategories] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [minPrice, setMinPrice] = useState<number | null>(null);
  const [maxPrice, setMaxPrice] = useState<number | null>(null);
  const [user, setUser] = useState<UserResponseDTO | null>(null);  // Fetch d·ªØ li·ªáu danh m·ª•c
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await getAllCategories();
        if (response.data) {
          setCategories(response.data); // L∆∞u danh m·ª•c v√†o state
        }
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };
    const fetchProtected = async () => {
      try {
        const res = await getProtected();
        // Ki·ªÉm tra n·∫øu tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng h·ª£p l·ªá
        if (res.data && res.data.user) {
          const user = new UserResponseDTO();
          user.id = res.data.user.id;
          user.firstName = res.data.user.firstName;
          user.lastName = res.data.user.lastName;
          user.email = res.data.user.email;

          setUser(user);  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v√†o state
        } else {
          setUser(null); // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng, set null
        }
      } catch (error) {
        console.error("Token invalid or expired:", error);
        setUser(null); // N·∫øu token kh√¥ng h·ª£p l·ªá, set user null
      }
    };
    fetchProtected();
    fetchCategories();
  }, []); // Fetch danh m·ª•c ch·ªâ 1 l·∫ßn khi component mount

  // X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m
  const handleSearch = async () => {
    try {
      const response = await searchProducts(
        searchQuery, 
        selectedCategory === 'all' ? null : selectedCategory, // N·∫øu ch·ªçn "All", kh√¥ng √°p d·ª•ng b·ªô l·ªçc danh m·ª•c
        minPrice, 
        maxPrice, 
        currentPage, 
        4
      );
      if (response && response.data) {
        setProducts(response.data.productDTOs); // C·∫≠p nh·∫≠t s·∫£n ph·∫©m sau khi t√¨m ki·∫øm
        setTotalPages(response.data.totalPages); // C·∫≠p nh·∫≠t t·ªïng s·ªë trang
      }
    } catch (error) {
      console.error('Error searching products:', error);
    }
  };

  // L·ªçc theo danh m·ª•c
  const handleCategoryChange = (categoryId: string | null) => {
    setSelectedCategory(categoryId);
    setCurrentPage(1); // ƒê·∫∑t l·∫°i trang ƒë·∫ßu ti√™n khi ch·ªçn danh m·ª•c
  };

  // L·ªçc theo gi√°
  const handlePriceFilterChange = () => {
    setCurrentPage(1); // ƒê·∫∑t l·∫°i trang ƒë·∫ßu ti√™n khi l·ªçc gi√°
  };

  // Thay ƒë·ªïi trang
  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber); // Thay ƒë·ªïi trang
    handleSearch(); // G·ªçi l·∫°i h√†m t√¨m ki·∫øm ƒë·ªÉ t·∫£i s·∫£n ph·∫©m theo trang m·ªõi
  };

  // Fetch s·∫£n ph·∫©m (t√πy theo currentPage ƒë√£ thay ƒë·ªïi trong handleSearch)
useEffect(() => {
  handleSearch();  // M·ªói khi currentPage thay ƒë·ªïi, g·ªçi l·∫°i h√†m t√¨m ki·∫øm ƒë·ªÉ t·∫£i s·∫£n ph·∫©m theo trang m·ªõi
}, [currentPage]);  // Ch·∫°y l·∫°i khi currentPage ho·∫∑c searchQuery thay ƒë·ªïi

  return (
    <div className="home-page">
      {/* Ti√™u ƒë·ªÅ v·ªõi logo */}
      <h1>
        <img src={image} alt="Shopee" className="logo" /> New Arrivals
      </h1>
      <p>
        Xin ch√†o <b>{user?.firstName} {user?.lastName}</b>, Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ª≠a h√†ng ch√∫ng t√¥i! üéâ
      </p>
      {/* Search Bar */}
      <div className="search-bar">
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)} // C·∫≠p nh·∫≠t gi√° tr·ªã t√¨m ki·∫øm
          placeholder="Search products..."
        />
        <button onClick={handleSearch}>Search</button> {/* B·∫•m ƒë·ªÉ t√¨m ki·∫øm */}
      </div>

      {/* Filters */}
      <div className="filters">
        <div className="price-filter">
          <input
            type="number"
            value={minPrice || ''}
            onChange={(e) => setMinPrice(Number(e.target.value))}
            placeholder="Min Price"
          />
          <input
            type="number"
            value={maxPrice || ''}
            onChange={(e) => setMaxPrice(Number(e.target.value))}
            placeholder="Max Price"
          />
        </div>
      </div>

      {/* Categories Section */}
      <div className="categories">
        <div className="category-list">
          <CategoryCard
            key="all"
            category={{ id: 'all', categoryName: 'All' }}
            isSelected={selectedCategory === 'all'}
            onClick={() => handleCategoryChange('all')}
          />
          {categories && categories.length > 0 ? (
            categories.map((category) => (
              <CategoryCard
                key={category.id}
                category={category}
                isSelected={selectedCategory === category.id} // Check xem danh m·ª•c ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
                onClick={() => handleCategoryChange(category.id)} // Th√™m event click v√†o category
              />
            ))
          ) : (
            <p>No categories available</p> // N·∫øu kh√¥ng c√≥ danh m·ª•c
          )}
        </div>
      </div>

      {/* Products Section */}
      <div className="products">
        <div className="product-list">
          {products && products.length > 0 ? (
            products.map((product) => (
              <ProductCard key={product.id} product={product} /> // Hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m
            ))
          ) : (
            <p>No products available</p> // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
          )}
        </div>

        {/* Pagination */}
        <div className="pagination">
          {totalPages > 0 &&
            Array.from({ length: totalPages }, (_, index) => (
              <button key={index} onClick={() => handlePageChange(index + 1)}>
                {index + 1}
              </button>
            ))}
        </div>
      </div>
    </div>
  );
};

export default HomePage;
